{"version":3,"sources":["Components/Constants.js","Components/Outcome.js","Components/ResultSetter.js","Components/AmountButtons.js","Components/RollLog.js","Components/LogInterpreter.js","App.js","reportWebVitals.js","index.js"],"names":["DICE_MATRIX","DICE_NAMES","RESULT_NAMES","useStyles","makeStyles","root","height","width","OutcomeTally","arr","classes","i","v","arr1","slice","arr2","map","x","Grid","item","lg","Card","raised","CardContent","Typography","color","align","Math","abs","Roller","amount","func","setLog","setRolled","results","rollLog","Button","size","variant","onClick","event","l","roll","floor","random","length","push","splice","AmountButtons","handleChange","newAmount","currentTarget","value","id","className","indexOf","ButtonGroup","disabled","RollLog","log","displayLog","container","LogInterpreter","baseLog","logContents","y","TableRow","TableCell","TableContainer","components","Paper","Table","stickyHeader","TableHead","margin","padding","App","useState","rollAmount","setRollAmount","rolledAmount","setRolledAmount","result","setResult","setRollLog","elevation","direction","spacing","alignItems","alignContent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e28667d1.chunk.js","sourcesContent":["export const DICE_MATRIX = [\r\n  [12, 12, 0, 6, 7, 1], //Boost die (d6)\r\n  [12, 12, 3, 3, 4, 4], //Setback die (d6)\r\n  [12, 0, 0, 8, 1, 1, 6, 7], //Ability die (d8)\r\n  [12, 3, 9, 4, 4, 4, 10, 11], //Difficulty die (d8)\r\n  [12, 0, 0, 8, 8, 1, 6, 6, 6, 7, 7, 2], //Proficiency die (d12)\r\n  [12, 3, 3, 9, 9, 4, 4, 11, 11, 10, 10, 5] //Challenge die (d12)\r\n];\r\nexport const DICE_NAMES = [\r\n  \"Boost\",\r\n  \"Setback\",\r\n  \"Ability\",\r\n  \"Difficulty\",\r\n  \"Proficiency\",\r\n  \"Challenge\"\r\n];\r\n\r\nexport const RESULT_NAMES = [\r\n  \"Success\",\r\n  \"Advantage\",\r\n  \"Triumph\",\r\n  \"Failure\",\r\n  \"Threat\",\r\n  \"Despair\",\r\n  \"Success and Advantage\",\r\n  \"Advantage and Advantage\",\r\n  \"Success and Success\",\r\n  \"Failure and Failure\",\r\n  \"Threat and Threat\",\r\n  \"Threat and Failure\",\r\n  \"Blank\"\r\n];\r\n\r\nexport default { DICE_MATRIX, DICE_NAMES, RESULT_NAMES };\r\n","import { RESULT_NAMES } from \"./Constants.js\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    height: \"100%\",\r\n    width: \"33%\"\r\n  }\r\n});\r\n\r\nexport const OutcomeTally = arr => {\r\n  const classes = useStyles();\r\n  let i = -1;\r\n  let v = -1;\r\n  let arr1 = arr.slice(0, 3);\r\n  let arr2 = arr.slice(3);\r\n  let tally = arr1.map(x => {\r\n    i++;\r\n    return x - arr2[i];\r\n  });\r\n  let display = tally.map(x => {\r\n    if (x >= 0) {\r\n      v++;\r\n      return (\r\n        <Grid item lg={4} classes={{ root: classes.root }}>\r\n          <Card raised>\r\n            <CardContent>\r\n              <Typography color=\"textPrimary\" align=\"center\">\r\n                {RESULT_NAMES[v]}\r\n              </Typography>\r\n              <Typography align=\"center\">{x}</Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      );\r\n    } else if (x < 0) {\r\n      v++;\r\n      return (\r\n        <Grid item lg={4} classes={{ root: classes.root }}>\r\n          <Card raised>\r\n            <CardContent>\r\n              <Typography color=\"textPrimary\" align=\"center\">\r\n                {RESULT_NAMES[v + 3]}\r\n              </Typography>\r\n              <Typography align=\"center\">{Math.abs(x)}</Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      );\r\n    }\r\n  });\r\n  return display;\r\n};\r\n\r\nexport default OutcomeTally;\r\n","import React from \"react\";\r\nimport { DICE_MATRIX } from \"./Constants.js\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nexport const Roller = (amount, func, setLog, setRolled) => {\r\n  let i = 0;\r\n  let results = [0, 0, 0, 0, 0, 0];\r\n  let rollLog = [];\r\n  const handleRoll = event => {\r\n    amount.map(x => {\r\n      if (x > 0) {\r\n        for (let l = 0; l < x; l++) {\r\n          let roll =\r\n            DICE_MATRIX[i][Math.floor(Math.random() * DICE_MATRIX[i].length)];\r\n          rollLog.push(roll);\r\n          if (roll == 12) {\r\n            //blank rolled, do nothing\r\n          } else if (roll == 6) {\r\n            results.splice(0, 1, results[0] + 1);\r\n            results.splice(1, 1, results[1] + 1);\r\n          } else if (roll == 7) {\r\n            results.splice(1, 1, results[1] + 2);\r\n          } else if (roll == 8) {\r\n            results.splice(0, 1, results[0] + 2);\r\n          } else if (roll == 9) {\r\n            results.splice(3, 1, results[3] + 2);\r\n          } else if (roll == 10) {\r\n            results.splice(4, 1, results[4] + 2);\r\n          } else if (roll == 11) {\r\n            results.splice(4, 1, results[4] + 1);\r\n            results.splice(5, 1, results[5] + 1);\r\n          } else {\r\n            results.splice(roll, 1, results[roll] + 1);\r\n          }\r\n          setLog(rollLog);\r\n        }\r\n        i++;\r\n      } else {\r\n        i++;\r\n        return 0;\r\n      }\r\n    }, []);\r\n    setRolled(amount);\r\n    return func(results);\r\n  };\r\n  return (\r\n    <Button\r\n      size=\"large\"\r\n      color=\"secondary\"\r\n      variant=\"outlined\"\r\n      onClick={handleRoll}\r\n    >\r\n      Roll\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default Roller;\r\n","import React from \"react\";\r\nimport { DICE_MATRIX, DICE_NAMES } from \"./Constants\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nexport const AmountButtons = (arr, func) => {\r\n  const handleChange = event => {\r\n    let newAmount = [...arr];\r\n    if (\r\n      event.currentTarget.value == 1 &&\r\n      newAmount[event.currentTarget.id] < 5\r\n    ) {\r\n      newAmount.splice(\r\n        event.currentTarget.id,\r\n        1,\r\n        newAmount[event.currentTarget.id] + 1\r\n      );\r\n      return func(newAmount);\r\n    } else if (\r\n      event.currentTarget.value == -1 &&\r\n      newAmount[event.currentTarget.id] > 0\r\n    ) {\r\n      newAmount.splice(\r\n        event.currentTarget.id,\r\n        1,\r\n        newAmount[event.currentTarget.id] - 1\r\n      );\r\n      return func(newAmount);\r\n    }\r\n  };\r\n\r\n  return DICE_MATRIX.map(x => {\r\n    return (\r\n      <>\r\n        <Typography variant=\"h5\" className={DICE_NAMES[DICE_MATRIX.indexOf(x)]}>\r\n          {DICE_NAMES[DICE_MATRIX.indexOf(x)]}\r\n        </Typography>\r\n        <ButtonGroup size=\"large\" variant=\"contained\" color=\"primary\">\r\n          <Button value={-1} id={DICE_MATRIX.indexOf(x)} onClick={handleChange}>\r\n            -\r\n          </Button>\r\n          <Button disabled variant=\"outlined\">\r\n            <Typography color=\"textPrimary\">\r\n              {arr[DICE_MATRIX.indexOf(x)]}\r\n            </Typography>\r\n          </Button>\r\n          <Button value={1} id={DICE_MATRIX.indexOf(x)} onClick={handleChange}>\r\n            +\r\n          </Button>\r\n        </ButtonGroup>\r\n      </>\r\n    );\r\n  });\r\n};\r\n\r\nexport default AmountButtons;\r\n","import React from \"react\";\r\nimport { DICE_NAMES, RESULT_NAMES } from \"./Constants\";\r\n\r\nexport const RollLog = (amount, log) => {\r\n  let i = -1;\r\n  let displayLog = [[], [], [], [], [], []];\r\n  amount.map(x => {\r\n    i++;\r\n    for (let l = 0; l < x; l++) {\r\n      displayLog[i].push(log[l]);\r\n    }\r\n  });\r\n  return displayLog;\r\n};\r\n\r\nexport default RollLog;\r\n","import React from \"react\";\r\nimport RollLog from \"./RollLog\";\r\nimport { DICE_NAMES, RESULT_NAMES } from \"./Constants\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    height: 300,\r\n    width: \"100%\"\r\n  }\r\n});\r\n\r\nexport const LogInterpreter = (amount, log) => {\r\n  const classes = useStyles();\r\n  if (amount) {\r\n    let baseLog = RollLog(amount, log);\r\n    let logContents = baseLog.map(x => {\r\n      if (baseLog[baseLog.indexOf(x)]) {\r\n        return baseLog[baseLog.indexOf(x)].map(y => {\r\n          return (\r\n            <TableRow>\r\n              <TableCell>{DICE_NAMES[baseLog.indexOf(x)]}</TableCell>\r\n              <TableCell align=\"right\">{RESULT_NAMES[y]}</TableCell>\r\n            </TableRow>\r\n          );\r\n        });\r\n      }\r\n    });\r\n    return (\r\n      <Card raised>\r\n        <CardContent>\r\n          <TableContainer components={Paper} className={classes.container}>\r\n            <Table stickyHeader size=\"small\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Dice</TableCell>\r\n                  <TableCell align=\"right\">Results</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              {logContents}\r\n            </Table>\r\n          </TableContainer>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n};\r\n\r\nexport default LogInterpreter;\r\n","import { React, useState } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport OutcomeTally from \"./Components/Outcome\";\nimport Roller from \"./Components/ResultSetter\";\nimport AmountButtons from \"./Components/AmountButtons\";\nimport LogInterpreter from \"./Components/LogInterpreter\";\n\nconst useStyles = makeStyles({\n  root: {\n    margin: \"10% 30% 10% 30%\",\n    padding: \"0px 20px 0px 20px\"\n  }\n});\n\nexport const App = () => {\n  const [rollAmount, setRollAmount] = useState([0, 0, 0, 0, 0, 0]);\n  const [rolledAmount, setRolledAmount] = useState();\n  const [result, setResult] = useState([0, 0, 0, 0, 0, 0]);\n  const [rollLog, setRollLog] = useState();\n  const classes = useStyles();\n\n  return (\n    <Paper elevation={6} classes={{ root: classes.root }}>\n      <Grid container direction=\"row\" spacing={3} alignItems=\"flex-start\">\n        <Grid container item lg={4} direction=\"row\">\n          <Grid item>{AmountButtons(rollAmount, setRollAmount)}</Grid>\n          <Grid item>\n            {Roller(rollAmount, setResult, setRollLog, setRolledAmount)}\n          </Grid>\n        </Grid>\n        <Grid container item lg={8} spacing={3} alignContent=\"space-around\">\n          {OutcomeTally(result)}\n          <Grid item lg={12}>\n            {LogInterpreter(rolledAmount, rollLog)}\n          </Grid>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}